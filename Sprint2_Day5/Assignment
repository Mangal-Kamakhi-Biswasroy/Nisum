<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaScript Todo List</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        h1 {
            text-align: center;
            color: #333;
        }
        #taskInput {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            margin-bottom: 10px;
        }
        #addBtn {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }
        #addBtn:hover {
            background-color: #45a049;
        }
        #taskList {
            list-style-type: none;
            padding: 0;
        }
        .taskItem {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border: 1px solid #ddd;
            margin-bottom: 5px;
            border-radius: 4px;
        }
        .taskText {
            flex-grow: 1;
            margin-left: 10px;
        }
        .completed {
            text-decoration: line-through;
            color: #888;
        }
        .deleteBtn {
            background-color: #f44336;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
        }
        .deleteBtn:hover {
            background-color: #d32f2f;
        }
    </style>
</head>
<body>
    <h1>JavaScript Todo List</h1>
    <input type="text" id="taskInput" placeholder="Enter a new task...">
    <button id="addBtn">Add Task</button>
    <ul id="taskList"></ul>

    <script>
        // ====================
        // DEMONSTRATING JS CONCEPTS
        // ====================
        
        // 1. DATA TYPES
        // -------------
        // String, Number, Boolean, Object, Array
        const appTitle = "Todo App"; // String
        let taskCount = 0; // Number
        const isActive = true; // Boolean
        const todoApp = {}; // Object
        let tasks = []; // Array

        // 2. FUNCTIONS
        // ------------
        // Function declaration (hoisted)
        initializeApp();

        // Function expression (not hoisted)
        const addTask = function() {
            const taskInput = document.getElementById('taskInput');
            const taskText = taskInput.value.trim();
            
            // 3. CONTROL FLOW STATEMENTS
            // -------------------------
            if (taskText) { // if statement
                // Create new task object
                const newTask = {
                    id: Date.now(), // Object property
                    text: taskText,
                    completed: false
                };
                
                tasks.push(newTask); // Array method
                renderTask(newTask);
                taskInput.value = '';
                taskCount++; // Number operation
                
                // Update UI
                updateTaskCounter();
            } else {
                alert('Please enter a task!');
            }
        };

        // Arrow function (ES6)
        const deleteTask = (taskId) => {
            // Array filter method
            tasks = tasks.filter(task => task.id !== taskId);
            document.querySelector(`li[data-id="${taskId}"]`).remove();
            updateTaskCounter();
        };

        // 4. HOISTING
        // -----------
        // This function is hoisted and can be called before declaration
        function initializeApp() {
            // Event listeners
            document.getElementById('addBtn').addEventListener('click', addTask);
            document.getElementById('taskInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    addTask();
                }
            });
            
            // Load saved tasks from localStorage
            loadTasks();
        }

        // 5. OBJECTS
        // ----------
        // Task object constructor
        function Task(id, text, completed) {
            this.id = id;
            this.text = text;
            this.completed = completed;
        }

        // 6. ARRAYS
        // ---------
        // Array methods used: push(), filter(), forEach()

        // Helper functions
        function renderTask(task) {
            const taskList = document.getElementById('taskList');
            
            const li = document.createElement('li');
            li.className = 'taskItem';
            li.dataset.id = task.id;
            
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.checked = task.completed;
            checkbox.addEventListener('change', function() {
                toggleTaskComplete(task.id, this.checked);
            });
            
            const span = document.createElement('span');
            span.className = 'taskText';
            span.textContent = task.text;
            if (task.completed) {
                span.classList.add('completed');
            }
            
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'deleteBtn';
            deleteBtn.textContent = 'Delete';
            deleteBtn.addEventListener('click', function() {
                deleteTask(task.id);
            });
            
            li.appendChild(checkbox);
            li.appendChild(span);
            li.appendChild(deleteBtn);
            taskList.appendChild(li);
        }

        function toggleTaskComplete(taskId, isCompleted) {
            // Find task in array
            const task = tasks.find(t => t.id === taskId);
            if (task) {
                task.completed = isCompleted;
                const taskText = document.querySelector(`li[data-id="${taskId}"] .taskText`);
                taskText.classList.toggle('completed', isCompleted);
            }
        }

        function updateTaskCounter() {
            const remaining = tasks.filter(t => !t.completed).length;
            document.querySelector('h1').textContent = 
                `JavaScript Todo List (${remaining}/${tasks.length} remaining)`;
        }

        function loadTasks() {
            // Try to load from localStorage
            const savedTasks = localStorage.getItem('todoTasks');
            if (savedTasks) {
                tasks = JSON.parse(savedTasks);
                tasks.forEach(task => {
                    // Using the Task constructor
                    const taskObj = new Task(task.id, task.text, task.completed);
                    renderTask(taskObj);
                });
                updateTaskCounter();
            }
        }

        // Save tasks to localStorage when page unloads
        window.addEventListener('beforeunload', function() {
            localStorage.setItem('todoTasks', JSON.stringify(tasks));
        });
    </script>
</body>
</html>
